

varying vec2 UV;
varying vec3 viewRay;

uniform sampler2D textureSampler0;
uniform sampler2D depthSampler;
uniform sampler2D _2DshadowSampler;

uniform mat4 cameraToWorldMatrix;
uniform mat4 worldToLightMatrix;
uniform mat4 lightModelViewProjectionMatrix;

uniform float zNear;
uniform float zFar;

uniform float renderTargetWidth;
uniform float renderTargetHeight;

uniform float useShadows;

//uniform float l_radius[8];

float linearDepth(float depthSample)
{
    float zlin;
    depthSample=2.0*depthSample-1.0;
    zlin=2.0*zNear*zFar/(zFar+zNear-depthSample*(zFar-zNear));
    return zlin;
}


void intersectCone3(vec3 cone_vertice, vec3 cone_direction, float cone_length, float cone_angle, vec3 ray_origin, vec3 ray_direction, out float depth0, out float depth1)
{
	mat3 M;
	float ctetha=cos(cone_angle);
	float sqrdctetha=ctetha*ctetha;
	vec3 rorigin=ray_origin;
	
	M[0][0]=cone_direction.x*cone_direction.x - sqrdctetha;
	M[0][1]=cone_direction.x*cone_direction.y;
	M[0][2]=cone_direction.x*cone_direction.z;
	
	M[1][0]=cone_direction.x*cone_direction.y;
	M[1][1]=cone_direction.y*cone_direction.y - sqrdctetha;
	M[1][2]=cone_direction.y*cone_direction.z;
	
	M[2][0]=cone_direction.x*cone_direction.z;
	M[2][1]=cone_direction.z*cone_direction.y;
	M[2][2]=cone_direction.z*cone_direction.z - sqrdctetha;
	
	
	
	vec3 delta=cone_vertice;
	vec3 cap_normal=cone_direction;
	vec3 cap_point=cone_vertice-cone_direction*cone_length;
	
	vec3 i0;
	vec3 i1;
	
	float t;
	float q=dot(cap_normal, cap_point);
	
	vec3 Mtdelta=M*delta;
	float c0=dot(delta, Mtdelta);
	float c1=dot(ray_direction, Mtdelta);
	float c2=dot(ray_direction, M*ray_direction);
	
	float i=c1*c1 - c0*c2;
	
	if(i<0.0)
	{
		depth0=0.0;
		depth1=0.0;
	}
	
	float d=sqrt(i);
	float t0=(-c1-d)/c2;
	float t1=(-c1+d)/c2;
	
	depth0=-t0;
	depth1=-t1;	
	
	
	i0=rorigin+ray_direction*depth0;
	i1=rorigin+ray_direction*depth1;
	
	vec3 v0=(i0-cone_vertice);
	vec3 v1=(i1-cone_vertice);
	
	float sqrdlen=cone_length*cone_length;
	
	if(dot(-cone_direction, v1)<0.0 || dot(v1, v1)>sqrdlen)
	{
		depth1=0.0;
	}
	if(dot(-cone_direction, v0)<0.0 || dot(v0, v0)>sqrdlen)
	{
		depth0=0.0;
	}
	
	if(depth1<=0.0)
	{
		t=q/dot(cap_normal, ray_direction);
		depth1=t;
	}



	
	
	
	
}



float shade_point(vec3 light_pos, vec3 light_direction, float light_radius, vec3 position)
{
	vec3 lvec=light_pos-position;
	/*float lvec_len=dot(lvec, lvec);*/
	float fallof=length(lvec);
	vec3 nlvec=lvec/fallof;
	float q=(light_radius-fallof)/light_radius;
	//return 0.01;
	//return light_radius*dot(nlvec, light_direction)/(lvec_len*0.005);
	return (dot(nlvec, light_direction)*q)/(fallof*fallof*0.005);
}






void main()
{
    float depth=linearDepth(texture2D(depthSampler, UV).x);	/* 0...1 to 0...far */
    vec3 view_vec;
    //vec4 vcolor=vec4(1.0, 1.0, 1.0, 1.0);
    vec4 vcolor=gl_LightSource[0].diffuse;

	float dFactor;

	vec3 i0;
	vec3 i1;
	vec3 curPos;
	float depth0;
	float depth1;
	float startDepth;
	float endDepth;
	float stepLen=0.075;
	float stepLenWorld;
	float scattering=0.025;
	float density=1.8;
	float accum=0.0;
	int stepCount=10;
	float rayLength;
	float shadow;
	float spotFallof;
	

    
	float pixelRayMarchNoise=texture2D(textureSampler0, vec2(UV.x, UV.y)*vec2(192.0, 108.0)).x*20.0;
   

	view_vec=normalize(viewRay);
		
		
		
	intersectCone3(gl_LightSource[0].position.xyz, -gl_LightSource[0].spotDirection, gl_LightSource[0].diffuse.a, ((3.14159265*gl_LightSource[0].spotCutoff)/180.0), vec3(0.0, 0.0, 0.0), view_vec, depth0, depth1);
	
    startDepth = max(0.0, depth0);
  	startDepth=min(depth/(-view_vec.z), startDepth);
  	
    endDepth = max(0.0, depth1);
	endDepth=min(depth/(-view_vec.z), endDepth);
	
	curPos=view_vec*startDepth;
	stepLenWorld=(endDepth-startDepth)/stepCount;
	//curPos-=stepLenWorld*view_vec;
	curPos+=view_vec*stepLenWorld*(2.0*pixelRayMarchNoise-1.0);
	
	for(int i=1; i<stepCount && depth0!=depth1; i++)
	{
		curPos+=stepLenWorld*view_vec;
			
			/* this should be concatenated... */
			/* TODO: find a better way to do this projection... */
			
			
		if(useShadows>0.0)
		{
			vec4 t=lightModelViewProjectionMatrix * cameraToWorldMatrix * vec4(curPos, 1.0);
			
			shadow=0.0;
			
			t/=t.w;

			t.x=t.x*0.5 + 0.5;
			t.y=t.y*0.5 + 0.5;
			t.z=t.z*0.5 + 0.5;
				
			if(t.x<=1.0 && t.x>=0.0 && t.y<=1.0 && t.y>=0.0 && t.w >=0.0)
			{
			
				dFactor=texture2D(_2DshadowSampler, t.xy).x;
				if(t.z<dFactor) shadow=density;
			}
		}
		else
		{
			shadow=1.0;
		}
		

			
		accum+=shade_point(gl_LightSource[0].position.xyz, -gl_LightSource[0].spotDirection, gl_LightSource[0].diffuse.a, curPos)*scattering*stepLenWorld*shadow;
	
	}
	
	//gl_FragColor=vec4(depth0);
	gl_FragColor=vcolor*accum;
	//gl_FragColor=vec4(depth1-depth0)*0.01;


}











